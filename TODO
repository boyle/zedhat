Immediate Work

2017-04-10 use utf-8 for equations, so we can use nice symbols for pretty equations
2017-04-10 pass an equation to the handler and a list of matrices
           "x_{n+1} = (J^T W J + \lambda^2 R^T R)^{-1} (J^T W b + \lambda^2 R^T R ( x_* - x_n ))"
           {{ "J", mat* },
            { "W", mat* },
            { "\lambda", mat* },
            { "R", mat* },
            { "b", mat* },
            { "x_*", mat* },
            { "x_n", mat* }}
2017-04-10 provide equation handling versions that destroy a particular matrix (safe), or ones that create a copy to work from
2017-04-10 cache certain sub-equation results, based on ptr + delta counter? delta counter updated at each modification, flushed from cache at roll-over somehow?
2017-04-10 tokenize equation into a tree obeying brackets (look at infix -> RPN conversion: https://rosettacode.org/wiki/Parsing/Shunting-yard_algorithm
2017-04-10 order equation operations by most efficient operations (dynamic & problem dependent), by
           1. matrix dimensions, 2. sparse (nnz) vs. dense, 3. split block-wise for multicore
2017-04-10 check units on equations; uses SI *only* internally, output will print scaling and standard units (μΩ --> 10⁻⁶ V/A --> 10⁻⁶ kg·m²·s⁻³·A⁻²)
2017-04-10 matrix struct
           type = IDENTITY, DIAGONAL, DENSE, SPARSE_IJK (COO), SPARSE_CSR, SPARSE_CSC, BLOCK
           state = RAW, NORMALIZED, TRANSPOSED  (normalize before transpose)
           mat*
           scalar = 1.0
           m = 6 // rows
           n = 5 // cols
           moff = 2 // column offset
           noff = 0 // row offset
2017-04-10 mesh handling convert (optimal data structures for large meshes and manipulations)
           2d: tri <- hex oct rect square
           3d: tet <- box
           handling of second order boundary elements (curved sections in 2d and 3d)
2017-04-10 mesh projection operations 2d and 3d (c2f, etc)
2017-04-10 find element centers for element selection list
2017-04-10 evaluate a level set function for element fractions
2017-04-10 consume stim/meas structures (std data file of stim/meas pairs, time, meas, err est)
2017-04-10 gmsh wrapper
2017-04-10 netgen wrapper
2018-03-02 compare to R2, R3t (http://www.es.lancs.ac.uk/people/amb/Freeware/R2/R2.htm) Binley et al.
2018-03-02 compare to E4D https://e4d.pnnl.gov/Pages/Home.aspx USDoE
2018-03-02 compare to BERT https://gitlab.com/resistivity-net/bert Rucker et al

Long-term Acceptance Criteria
 ✓ 1. compiles on all systems (windows, linux, osx)
   2. long-term supportable (minimize dependencies)
   3. clean library bindings (dynamic & static):
      - C (native)
      - C++ (native)
      - matlab, octave
      - python,
   4. a "simple interface" as well as giving access
      to the core functionality (kernels)
        simple:  meas + model + config --> img
        kernels: solve(meas, model, config, &img)
 ✓ 5. cmdline: shell call simple interface
   6. gui: python(?) call simple interface, visualize
   7. export run data package (input/state/outputs) .zh
      for exactly repeatable results (version compatibility)
