AT_INIT()
AT_COPYRIGHT([Copyright 2016-2019, Alistair Boyle, 3-clause BSD License])
AT_COLOR_TESTS
AT_TESTED(AT_PACKAGE_NAME)

m4_define(ZH_UNIT_TEST,[
AT_SETUP([$1 - $2])
AT_KEYWORDS([unittest $1])
AT_CHECK([$1 unittest],0,ignore,[[[  PASSED  ] $3 test(s).
]])
AT_CLEANUP
])

m4_define(ZH_LIB_TEST,[
AT_SETUP([$1 - $2])
AT_KEYWORDS([libs $1])
AT_CHECK(lib[$1]_[$2],0,ignore)
AT_CLEANUP
])

m4_define(ZH_HELP_SHORT, [AT_PACKAGE_NAME @<:@options@:>@])
m4_define(ZH_HELP_LONG,
[ZH_HELP_SHORT
 --help -h     this help
 --version -V  version info
 --tolerance --tol -t <#.##e#>
               for checking --fwd
 --forward-solver --fwd -f <file.zh>
               solves X=A\B and A X = B
               with A B and X from file.zh
])

AT_BANNER([libs])
ZH_LIB_TEST(cblas,dgemm)
ZH_LIB_TEST(lapacke,dgels)
ZH_LIB_TEST(umfpack,solve)
ZH_LIB_TEST(cholmod,solve)

AT_BANNER([unit tests])
ZH_UNIT_TEST(file, zedhat file format I/O, 12)
ZH_UNIT_TEST(matrix, dense and sparse matrices, 9)
ZH_UNIT_TEST(model, system matrix calculator, 17)

AT_BANNER([args])
AT_SETUP([badargs])
AT_KEYWORDS([badargs args install])
AT_CHECK(AT_PACKAGE_NAME,1,ignore,ignore)
AT_CHECK(AT_PACKAGE_NAME asdf asdf,1,ignore,ignore)
AT_CHECK(AT_PACKAGE_NAME --unhandled-arg,1,ignore,ignore)
AT_CHECK(AT_PACKAGE_NAME asdf,1,ignore,ignore) dnl test: bad config file
AT_CLEANUP

AT_SETUP([--help])
AT_KEYWORDS([help args install])
AT_CHECK(AT_PACKAGE_NAME --help,0,ZH_HELP_LONG)
AT_CHECK(AT_PACKAGE_NAME -h,0,ZH_HELP_LONG)
AT_CHECK(AT_PACKAGE_NAME -?,1,ZH_HELP_LONG)
AT_CLEANUP

AT_SETUP(--version)
AT_KEYWORDS([version args install])
AT_CHECK(AT_PACKAGE_NAME --version,0,AT_PACKAGE_NAME[ ]AT_PACKAGE_VERSION[
])
AT_CHECK(AT_PACKAGE_NAME -V,0,AT_PACKAGE_NAME[ ]AT_PACKAGE_VERSION[
])
AT_CLEANUP

AT_SETUP(--tolerance)
AT_KEYWORDS([tolerance args install])
AT_CHECK(AT_PACKAGE_NAME --tolerance,1,ZH_HELP_LONG,AT_PACKAGE_NAME[: option '--tolerance' requires an argument
])
AT_CHECK(AT_PACKAGE_NAME -t,1,ZH_HELP_LONG,AT_PACKAGE_NAME[: option requires an argument -- 't'
])
AT_CHECK(AT_PACKAGE_NAME -t asdf,1,ZH_HELP_LONG,[error: --tolerance asdf: not a number
])
AT_CHECK(AT_PACKAGE_NAME -t -10,1,ZH_HELP_LONG,[error: --tolerance -10: must be non-negative
])
AT_CHECK(AT_PACKAGE_NAME -t 10,0,,)
AT_CHECK(AT_PACKAGE_NAME -t +10,0,,)
AT_CHECK(AT_PACKAGE_NAME -t 10e-100,0,,)
AT_CHECK(AT_PACKAGE_NAME -t 10e+100,0,,)
AT_CHECK(AT_PACKAGE_NAME -t 1.04e-100,0,,)
AT_CHECK(AT_PACKAGE_NAME -t 1.04e+100,0,,)
AT_CLEANUP

AT_SETUP(--forward-solver)
AT_KEYWORDS([fwd args install])
AT_XFAIL_IF([test 1])
m4_define(ZH_FWD_OUTPUT,[fwd: || A\B - X ||_2 == || A X - B ||_2
m4_if($2,0,[pass],[fwd A: ret = $2 ($1)
fwd B: ret = $2 ($1)
fwd X: ret = $2 ($1)])
])
m4_define(ZH_FWD_AXB_PASS,ZH_FWD_OUTPUT(testAXB-[$1].mat,0))
ZH_DATA_FILE_TESTA_MAT
ZH_DATA_FILE_TESTAB_MAT
ZH_DATA_FILE_TESTAXB_MAT
AT_CHECK(AT_PACKAGE_NAME --forward-solver testab.mat,1,[ZH_FWD_OUTPUT(testab.mat,3)],)
AT_CHECK(AT_PACKAGE_NAME --fwd testab.mat,1,[ZH_FWD_OUTPUT(testab.mat,3)],)
AT_CHECK(AT_PACKAGE_NAME -f testab.mat,1,[ZH_FWD_OUTPUT(testab.mat,3)],)
AT_CHECK(AT_PACKAGE_NAME -f junk.mat,1,[ZH_FWD_OUTPUT(junk.mat,2)],)
AT_CHECK(AT_PACKAGE_NAME -f, 1, ZH_HELP_LONG, AT_PACKAGE_NAME[: option requires an argument -- 'f'
],)
AT_CHECK(AT_PACKAGE_NAME -f testab.mat,1,[ZH_FWD_OUTPUT(testab.mat,3)],)
AT_CHECK(AT_PACKAGE_NAME --tol 1e-11 -f testAXB-v73.mat,0,[ZH_FWD_AXB_PASS([v73])],)
AT_CHECK(AT_PACKAGE_NAME -t 1e-11 -f testAXB-v7.mat,0,[ZH_FWD_AXB_PASS([v7])],)
AT_CHECK(AT_PACKAGE_NAME -t 1e-11 -f testAXB-v6.mat,0,[ZH_FWD_AXB_PASS([v6])],)
AT_CHECK(AT_PACKAGE_NAME[[ --tol 5e-12 -f testAXB-v73.mat | sed 's/^\(fail.*=\).*/\1/'; test ${PIPESTATUS[0]} -eq 0]],1,[fwd: || A\B - X ||_2 == || A X - B ||_2
fail: || A\B - X ||_2 =
],)
AT_CHECK(AT_PACKAGE_NAME[[ --tol 0     -f testAXB-v73.mat | sed 's/^\(fail.*=\).*/\1/'; test ${PIPESTATUS[0]} -eq 0]],1,[fwd: || A\B - X ||_2 == || A X - B ||_2
fail: || A X - B ||_2 =
],)
AT_CLEANUP

AT_BANNER([mesh loading])
AT_SETUP([netgen .vol])
AT_KEYWORDS([netgen])

AT_DATA([ngcube.vol],m4_include(tests/ngcube.vol))
gzip -k ngcube.vol
echo -e "gibberish file\r\nyup just junk some more" > junk1.not.vol
echo -e "mesh3d\r\nyup just junk some more" > junk2.not.vol
echo -e "mesh3d\ndimension\n1" > junk3.not.vol
echo -e "mesh3d\ngeomtype\n11" > junk4.not.vol
echo -e "mesh3d\ndimension\n2\nsurfaceelements\n5" > junk5.not.vol
echo -e "mesh3d\ndimension\n2\npoints\n5" > junk6.not.vol
echo -e "mesh3d\ndimension\n2\nvolumeelements\n5" > junk7.not.vol
echo -e "mesh3d\ndimension\n2\nvolumeelements\nXXX" > junk8.not.vol
echo -e "mesh3d\n\nsurfaceelements\n5" > junk5nd.not.vol
echo -e "mesh3d\n\npoints\n5" > junk6nd.not.vol
echo -e "mesh3d\n\nvolumeelements\n5" > junk7nd.not.vol
echo -e "mesh3d\n\nvolumeelements\nXXX" > junk8nd.not.vol
echo -e "mesh3d\ndimension\n3\ngeomtype\n0\nvolumeelements\n0\n" > junk9a.not.vol
echo -e "mesh3d\ndimension\n3\ngeomtype\n0\nsurfaceelements\n0\n" > junk9b.not.vol
echo -e "mesh3d\ndimension\n3\ngeomtype\n0\npoints\n0\n" > junk9c.not.vol
echo -e "asdf\n" > junk1.not.zh
echo -e "zedhat\nformat\n10\n" > junk2.not.zh
AT_CHECK([file ngcube.vol],0,
[reading ngcube.vol
mesh3d
dimension 3
geomtype 0
surfaceelements 12
volumeelements 6
points 8
],)
AT_CHECK([file ngcube.vol.gz],0,
[reading ngcube.vol.gz
mesh3d
dimension 3
geomtype 0
surfaceelements 12
volumeelements 6
points 8
],)
AT_CHECK([file nofile.vol],1,
[err: failed to open nofile.vol
],
[error: failed to load nofile.vol
])
AT_CHECK([file junk1.not.vol],1,
[reading junk1.not.vol
err: junk1.not.vol: missing header mesh3d
],
[error: failed to load junk1.not.vol
])
AT_CHECK([file junk2.not.vol],1,
[reading junk2.not.vol
mesh3d
err: junk2.not.vol: missing dimension
],
[error: failed to load junk2.not.vol
])
AT_CHECK([file junk3.not.vol],1,
[reading junk3.not.vol
mesh3d
dimension 1
err: bad dimension
],
[error: failed to load junk3.not.vol
])
AT_CHECK([file junk4.not.vol],1,
[reading junk4.not.vol
mesh3d
geomtype 11
err: bad geomtype
],
[error: failed to load junk4.not.vol
])
AT_CHECK([file junk5.not.vol],1,
[reading junk5.not.vol
mesh3d
dimension 2
surfaceelements 5
err: bad surfaceelements
],
[error: failed to load junk5.not.vol
])
AT_CHECK([file junk6.not.vol],1,
[reading junk6.not.vol
mesh3d
dimension 2
points 5
err: bad points
],
[error: failed to load junk6.not.vol
])
AT_CHECK([file junk7.not.vol],1,
[reading junk7.not.vol
mesh3d
dimension 2
volumeelements 5
err: bad volumeelements
],
[error: failed to load junk7.not.vol
])
AT_CHECK([file junk8.not.vol],1,
[reading junk8.not.vol
mesh3d
dimension 2
err: bad volumeelements
],
[error: failed to load junk8.not.vol
])
AT_CHECK([file junk5nd.not.vol],1,
[reading junk5nd.not.vol
mesh3d
surfaceelements 5
err: expect dimension before surfaceelements
],
[error: failed to load junk5nd.not.vol
])
AT_CHECK([file junk6nd.not.vol],1,
[reading junk6nd.not.vol
mesh3d
points 5
err: expect dimension before points
],
[error: failed to load junk6nd.not.vol
])
AT_CHECK([file junk7nd.not.vol],1,
[reading junk7nd.not.vol
mesh3d
volumeelements 5
err: expect dimension before volumeelements
],
[error: failed to load junk7nd.not.vol
])
AT_CHECK([file junk8nd.not.vol],1,
[reading junk8nd.not.vol
mesh3d
err: bad volumeelements
],
[error: failed to load junk8nd.not.vol
])
AT_CHECK([file junk9a.not.vol],1,
[reading junk9a.not.vol
mesh3d
dimension 3
geomtype 0
volumeelements 0
err: bad volumeelements
],
[error: failed to load junk9a.not.vol
])
AT_CHECK([file junk9b.not.vol],1,
[reading junk9b.not.vol
mesh3d
dimension 3
geomtype 0
surfaceelements 0
err: bad surfaceelements
],
[error: failed to load junk9b.not.vol
])
AT_CHECK([file junk9c.not.vol],1,
[reading junk9c.not.vol
mesh3d
dimension 3
geomtype 0
points 0
err: bad points
],
[error: failed to load junk9c.not.vol
])
AT_CHECK([file junk1.not.zh],1,
[reading junk1.not.zh
err: junk1.not.zh: missing header zedhat
],
[error: failed to load junk1.not.zh
])
AT_CHECK([file junk2.not.zh],1,
[reading junk2.not.zh
zedhat
format 10
err: bad format
],
[error: failed to load junk2.not.zh
])
AT_CLEANUP


